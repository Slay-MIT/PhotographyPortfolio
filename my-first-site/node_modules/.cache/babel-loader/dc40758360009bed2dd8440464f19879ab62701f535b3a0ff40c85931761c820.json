{"ast":null,"code":"import { transformProps } from '../../render/html/utils/transform.mjs';\nimport { animateMotionValue } from './motion-value.mjs';\nimport { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { setTarget } from '../../render/utils/setters.mjs';\nimport { getValueTransition } from '../utils/transitions.mjs';\nimport { getOptimisedAppearId } from '../optimized-appear/get-appear-id.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */\nfunction shouldBlockAnimation(_ref, key) {\n  let {\n    protectedKeys,\n    needsAnimating\n  } = _ref;\n  const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n  needsAnimating[key] = false;\n  return shouldBlock;\n}\nfunction animateTarget(visualElement, targetAndTransition) {\n  let {\n    delay = 0,\n    transitionOverride,\n    type\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var _a;\n  let {\n    transition = visualElement.getDefaultTransition(),\n    transitionEnd,\n    ...target\n  } = targetAndTransition;\n  const willChange = visualElement.getValue(\"willChange\");\n  if (transitionOverride) transition = transitionOverride;\n  const animations = [];\n  const animationTypeState = type && visualElement.animationState && visualElement.animationState.getState()[type];\n  for (const key in target) {\n    const value = visualElement.getValue(key, (_a = visualElement.latestValues[key]) !== null && _a !== void 0 ? _a : null);\n    const valueTarget = target[key];\n    if (valueTarget === undefined || animationTypeState && shouldBlockAnimation(animationTypeState, key)) {\n      continue;\n    }\n    const valueTransition = {\n      delay,\n      elapsed: 0,\n      ...getValueTransition(transition || {}, key)\n    };\n    /**\n     * If this is the first time a value is being animated, check\n     * to see if we're handling off from an existing animation.\n     */\n    let isHandoff = false;\n    if (window.HandoffAppearAnimations) {\n      const appearId = getOptimisedAppearId(visualElement);\n      if (appearId) {\n        const elapsed = window.HandoffAppearAnimations(appearId, key, value, frame);\n        if (elapsed !== null) {\n          valueTransition.elapsed = elapsed;\n          isHandoff = true;\n        }\n      }\n    }\n    value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key) ? {\n      type: false\n    } : valueTransition, visualElement, isHandoff));\n    const animation = value.animation;\n    if (animation) {\n      if (isWillChangeMotionValue(willChange)) {\n        willChange.add(key);\n        animation.then(() => willChange.remove(key));\n      }\n      animations.push(animation);\n    }\n  }\n  if (transitionEnd) {\n    Promise.all(animations).then(() => {\n      frame.update(() => {\n        transitionEnd && setTarget(visualElement, transitionEnd);\n      });\n    });\n  }\n  return animations;\n}\nexport { animateTarget };","map":{"version":3,"names":["transformProps","animateMotionValue","isWillChangeMotionValue","setTarget","getValueTransition","getOptimisedAppearId","frame","shouldBlockAnimation","_ref","key","protectedKeys","needsAnimating","shouldBlock","hasOwnProperty","animateTarget","visualElement","targetAndTransition","delay","transitionOverride","type","arguments","length","undefined","_a","transition","getDefaultTransition","transitionEnd","target","willChange","getValue","animations","animationTypeState","animationState","getState","value","latestValues","valueTarget","valueTransition","elapsed","isHandoff","window","HandoffAppearAnimations","appearId","start","shouldReduceMotion","has","animation","add","then","remove","push","Promise","all","update"],"sources":["D:/Programs/WebDev/ReactProject-1/my-first-site/node_modules/framer-motion/dist/es/animation/interfaces/visual-element-target.mjs"],"sourcesContent":["import { transformProps } from '../../render/html/utils/transform.mjs';\nimport { animateMotionValue } from './motion-value.mjs';\nimport { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { setTarget } from '../../render/utils/setters.mjs';\nimport { getValueTransition } from '../utils/transitions.mjs';\nimport { getOptimisedAppearId } from '../optimized-appear/get-appear-id.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */\nfunction shouldBlockAnimation({ protectedKeys, needsAnimating }, key) {\n    const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n    needsAnimating[key] = false;\n    return shouldBlock;\n}\nfunction animateTarget(visualElement, targetAndTransition, { delay = 0, transitionOverride, type } = {}) {\n    var _a;\n    let { transition = visualElement.getDefaultTransition(), transitionEnd, ...target } = targetAndTransition;\n    const willChange = visualElement.getValue(\"willChange\");\n    if (transitionOverride)\n        transition = transitionOverride;\n    const animations = [];\n    const animationTypeState = type &&\n        visualElement.animationState &&\n        visualElement.animationState.getState()[type];\n    for (const key in target) {\n        const value = visualElement.getValue(key, (_a = visualElement.latestValues[key]) !== null && _a !== void 0 ? _a : null);\n        const valueTarget = target[key];\n        if (valueTarget === undefined ||\n            (animationTypeState &&\n                shouldBlockAnimation(animationTypeState, key))) {\n            continue;\n        }\n        const valueTransition = {\n            delay,\n            elapsed: 0,\n            ...getValueTransition(transition || {}, key),\n        };\n        /**\n         * If this is the first time a value is being animated, check\n         * to see if we're handling off from an existing animation.\n         */\n        let isHandoff = false;\n        if (window.HandoffAppearAnimations) {\n            const appearId = getOptimisedAppearId(visualElement);\n            if (appearId) {\n                const elapsed = window.HandoffAppearAnimations(appearId, key, value, frame);\n                if (elapsed !== null) {\n                    valueTransition.elapsed = elapsed;\n                    isHandoff = true;\n                }\n            }\n        }\n        value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key)\n            ? { type: false }\n            : valueTransition, visualElement, isHandoff));\n        const animation = value.animation;\n        if (animation) {\n            if (isWillChangeMotionValue(willChange)) {\n                willChange.add(key);\n                animation.then(() => willChange.remove(key));\n            }\n            animations.push(animation);\n        }\n    }\n    if (transitionEnd) {\n        Promise.all(animations).then(() => {\n            frame.update(() => {\n                transitionEnd && setTarget(visualElement, transitionEnd);\n            });\n        });\n    }\n    return animations;\n}\n\nexport { animateTarget };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}