{"ast":null,"code":"import { useContext, useRef, useInsertionEffect, useEffect } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { MotionContext } from '../../context/MotionContext/index.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\nimport { LazyContext } from '../../context/LazyContext.mjs';\nimport { MotionConfigContext } from '../../context/MotionConfigContext.mjs';\nimport { optimizedAppearDataAttribute } from '../../animation/optimized-appear/data-id.mjs';\nimport { microtask } from '../../frameloop/microtask.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { SwitchLayoutGroupContext } from '../../context/SwitchLayoutGroupContext.mjs';\nlet scheduleHandoffComplete = false;\nfunction useVisualElement(Component, visualState, props, createVisualElement, ProjectionNodeConstructor) {\n  const {\n    visualElement: parent\n  } = useContext(MotionContext);\n  const lazyContext = useContext(LazyContext);\n  const presenceContext = useContext(PresenceContext);\n  const reducedMotionConfig = useContext(MotionConfigContext).reducedMotion;\n  const visualElementRef = useRef();\n  /**\n   * If we haven't preloaded a renderer, check to see if we have one lazy-loaded\n   */\n  createVisualElement = createVisualElement || lazyContext.renderer;\n  if (!visualElementRef.current && createVisualElement) {\n    visualElementRef.current = createVisualElement(Component, {\n      visualState,\n      parent,\n      props,\n      presenceContext,\n      blockInitialAnimation: presenceContext ? presenceContext.initial === false : false,\n      reducedMotionConfig\n    });\n  }\n  const visualElement = visualElementRef.current;\n  /**\n   * Load Motion gesture and animation features. These are rendered as renderless\n   * components so each feature can optionally make use of React lifecycle methods.\n   */\n  const initialLayoutGroupConfig = useContext(SwitchLayoutGroupContext);\n  if (visualElement && !visualElement.projection && ProjectionNodeConstructor && (visualElement.type === \"html\" || visualElement.type === \"svg\")) {\n    createProjectionNode(visualElementRef.current, props, ProjectionNodeConstructor, initialLayoutGroupConfig);\n  }\n  useInsertionEffect(() => {\n    visualElement && visualElement.update(props, presenceContext);\n  });\n  /**\n   * Cache this value as we want to know whether HandoffAppearAnimations\n   * was present on initial render - it will be deleted after this.\n   */\n  const wantsHandoff = useRef(Boolean(props[optimizedAppearDataAttribute] && !window.HandoffComplete));\n  useIsomorphicLayoutEffect(() => {\n    if (!visualElement) return;\n    visualElement.updateFeatures();\n    microtask.render(visualElement.render);\n    /**\n     * Ideally this function would always run in a useEffect.\n     *\n     * However, if we have optimised appear animations to handoff from,\n     * it needs to happen synchronously to ensure there's no flash of\n     * incorrect styles in the event of a hydration error.\n     *\n     * So if we detect a situtation where optimised appear animations\n     * are running, we use useLayoutEffect to trigger animations.\n     */\n    if (wantsHandoff.current && visualElement.animationState) {\n      visualElement.animationState.animateChanges();\n    }\n  });\n  useEffect(() => {\n    if (!visualElement) return;\n    if (!wantsHandoff.current && visualElement.animationState) {\n      visualElement.animationState.animateChanges();\n    }\n    if (wantsHandoff.current) {\n      wantsHandoff.current = false;\n      // This ensures all future calls to animateChanges() will run in useEffect\n      if (!scheduleHandoffComplete) {\n        scheduleHandoffComplete = true;\n        queueMicrotask(completeHandoff);\n      }\n    }\n  });\n  return visualElement;\n}\nfunction completeHandoff() {\n  window.HandoffComplete = true;\n}\nfunction createProjectionNode(visualElement, props, ProjectionNodeConstructor, initialPromotionConfig) {\n  const {\n    layoutId,\n    layout,\n    drag,\n    dragConstraints,\n    layoutScroll,\n    layoutRoot\n  } = props;\n  visualElement.projection = new ProjectionNodeConstructor(visualElement.latestValues, props[\"data-framer-portal-id\"] ? undefined : getClosestProjectingNode(visualElement.parent));\n  visualElement.projection.setOptions({\n    layoutId,\n    layout,\n    alwaysMeasureLayout: Boolean(drag) || dragConstraints && isRefObject(dragConstraints),\n    visualElement,\n    scheduleRender: () => visualElement.scheduleRender(),\n    /**\n     * TODO: Update options in an effect. This could be tricky as it'll be too late\n     * to update by the time layout animations run.\n     * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n     * ensuring it gets called if there's no potential layout animations.\n     *\n     */\n    animationType: typeof layout === \"string\" ? layout : \"both\",\n    initialPromotionConfig,\n    layoutScroll,\n    layoutRoot\n  });\n}\nfunction getClosestProjectingNode(visualElement) {\n  if (!visualElement) return undefined;\n  return visualElement.options.allowProjection !== false ? visualElement.projection : getClosestProjectingNode(visualElement.parent);\n}\nexport { useVisualElement };","map":{"version":3,"names":["useContext","useRef","useInsertionEffect","useEffect","PresenceContext","MotionContext","useIsomorphicLayoutEffect","LazyContext","MotionConfigContext","optimizedAppearDataAttribute","microtask","isRefObject","SwitchLayoutGroupContext","scheduleHandoffComplete","useVisualElement","Component","visualState","props","createVisualElement","ProjectionNodeConstructor","visualElement","parent","lazyContext","presenceContext","reducedMotionConfig","reducedMotion","visualElementRef","renderer","current","blockInitialAnimation","initial","initialLayoutGroupConfig","projection","type","createProjectionNode","update","wantsHandoff","Boolean","window","HandoffComplete","updateFeatures","render","animationState","animateChanges","queueMicrotask","completeHandoff","initialPromotionConfig","layoutId","layout","drag","dragConstraints","layoutScroll","layoutRoot","latestValues","undefined","getClosestProjectingNode","setOptions","alwaysMeasureLayout","scheduleRender","animationType","options","allowProjection"],"sources":["D:/Programs/WebDev/ReactProject-1/my-first-site/node_modules/framer-motion/dist/es/motion/utils/use-visual-element.mjs"],"sourcesContent":["import { useContext, useRef, useInsertionEffect, useEffect } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { MotionContext } from '../../context/MotionContext/index.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\nimport { LazyContext } from '../../context/LazyContext.mjs';\nimport { MotionConfigContext } from '../../context/MotionConfigContext.mjs';\nimport { optimizedAppearDataAttribute } from '../../animation/optimized-appear/data-id.mjs';\nimport { microtask } from '../../frameloop/microtask.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { SwitchLayoutGroupContext } from '../../context/SwitchLayoutGroupContext.mjs';\n\nlet scheduleHandoffComplete = false;\nfunction useVisualElement(Component, visualState, props, createVisualElement, ProjectionNodeConstructor) {\n    const { visualElement: parent } = useContext(MotionContext);\n    const lazyContext = useContext(LazyContext);\n    const presenceContext = useContext(PresenceContext);\n    const reducedMotionConfig = useContext(MotionConfigContext).reducedMotion;\n    const visualElementRef = useRef();\n    /**\n     * If we haven't preloaded a renderer, check to see if we have one lazy-loaded\n     */\n    createVisualElement = createVisualElement || lazyContext.renderer;\n    if (!visualElementRef.current && createVisualElement) {\n        visualElementRef.current = createVisualElement(Component, {\n            visualState,\n            parent,\n            props,\n            presenceContext,\n            blockInitialAnimation: presenceContext\n                ? presenceContext.initial === false\n                : false,\n            reducedMotionConfig,\n        });\n    }\n    const visualElement = visualElementRef.current;\n    /**\n     * Load Motion gesture and animation features. These are rendered as renderless\n     * components so each feature can optionally make use of React lifecycle methods.\n     */\n    const initialLayoutGroupConfig = useContext(SwitchLayoutGroupContext);\n    if (visualElement &&\n        !visualElement.projection &&\n        ProjectionNodeConstructor &&\n        (visualElement.type === \"html\" || visualElement.type === \"svg\")) {\n        createProjectionNode(visualElementRef.current, props, ProjectionNodeConstructor, initialLayoutGroupConfig);\n    }\n    useInsertionEffect(() => {\n        visualElement && visualElement.update(props, presenceContext);\n    });\n    /**\n     * Cache this value as we want to know whether HandoffAppearAnimations\n     * was present on initial render - it will be deleted after this.\n     */\n    const wantsHandoff = useRef(Boolean(props[optimizedAppearDataAttribute] &&\n        !window.HandoffComplete));\n    useIsomorphicLayoutEffect(() => {\n        if (!visualElement)\n            return;\n        visualElement.updateFeatures();\n        microtask.render(visualElement.render);\n        /**\n         * Ideally this function would always run in a useEffect.\n         *\n         * However, if we have optimised appear animations to handoff from,\n         * it needs to happen synchronously to ensure there's no flash of\n         * incorrect styles in the event of a hydration error.\n         *\n         * So if we detect a situtation where optimised appear animations\n         * are running, we use useLayoutEffect to trigger animations.\n         */\n        if (wantsHandoff.current && visualElement.animationState) {\n            visualElement.animationState.animateChanges();\n        }\n    });\n    useEffect(() => {\n        if (!visualElement)\n            return;\n        if (!wantsHandoff.current && visualElement.animationState) {\n            visualElement.animationState.animateChanges();\n        }\n        if (wantsHandoff.current) {\n            wantsHandoff.current = false;\n            // This ensures all future calls to animateChanges() will run in useEffect\n            if (!scheduleHandoffComplete) {\n                scheduleHandoffComplete = true;\n                queueMicrotask(completeHandoff);\n            }\n        }\n    });\n    return visualElement;\n}\nfunction completeHandoff() {\n    window.HandoffComplete = true;\n}\nfunction createProjectionNode(visualElement, props, ProjectionNodeConstructor, initialPromotionConfig) {\n    const { layoutId, layout, drag, dragConstraints, layoutScroll, layoutRoot, } = props;\n    visualElement.projection = new ProjectionNodeConstructor(visualElement.latestValues, props[\"data-framer-portal-id\"]\n        ? undefined\n        : getClosestProjectingNode(visualElement.parent));\n    visualElement.projection.setOptions({\n        layoutId,\n        layout,\n        alwaysMeasureLayout: Boolean(drag) || (dragConstraints && isRefObject(dragConstraints)),\n        visualElement,\n        scheduleRender: () => visualElement.scheduleRender(),\n        /**\n         * TODO: Update options in an effect. This could be tricky as it'll be too late\n         * to update by the time layout animations run.\n         * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n         * ensuring it gets called if there's no potential layout animations.\n         *\n         */\n        animationType: typeof layout === \"string\" ? layout : \"both\",\n        initialPromotionConfig,\n        layoutScroll,\n        layoutRoot,\n    });\n}\nfunction getClosestProjectingNode(visualElement) {\n    if (!visualElement)\n        return undefined;\n    return visualElement.options.allowProjection !== false\n        ? visualElement.projection\n        : getClosestProjectingNode(visualElement.parent);\n}\n\nexport { useVisualElement };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}