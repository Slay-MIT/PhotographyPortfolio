{"ast":null,"code":"import { flushKeyframeResolvers } from '../../render/utils/KeyframesResolver.mjs';\nimport { instantAnimationState } from '../../utils/use-instant-transition-state.mjs';\nimport { canAnimate } from './utils/can-animate.mjs';\nimport { getFinalKeyframe } from './waapi/utils/get-final-keyframe.mjs';\nclass BaseAnimation {\n  constructor(_ref) {\n    let {\n      autoplay = true,\n      delay = 0,\n      type = \"keyframes\",\n      repeat = 0,\n      repeatDelay = 0,\n      repeatType = \"loop\",\n      ...options\n    } = _ref;\n    // Track whether the animation has been stopped. Stopped animations won't restart.\n    this.isStopped = false;\n    this.hasAttemptedResolve = false;\n    this.options = {\n      autoplay,\n      delay,\n      type,\n      repeat,\n      repeatDelay,\n      repeatType,\n      ...options\n    };\n    this.updateFinishedPromise();\n  }\n  /**\n   * A getter for resolved data. If keyframes are not yet resolved, accessing\n   * this.resolved will synchronously flush all pending keyframe resolvers.\n   * This is a deoptimisation, but at its worst still batches read/writes.\n   */\n  get resolved() {\n    if (!this._resolved && !this.hasAttemptedResolve) {\n      flushKeyframeResolvers();\n    }\n    return this._resolved;\n  }\n  /**\n   * A method to be called when the keyframes resolver completes. This method\n   * will check if its possible to run the animation and, if not, skip it.\n   * Otherwise, it will call initPlayback on the implementing class.\n   */\n  onKeyframesResolved(keyframes, finalKeyframe) {\n    this.hasAttemptedResolve = true;\n    const {\n      name,\n      type,\n      velocity,\n      delay,\n      onComplete,\n      onUpdate,\n      isGenerator\n    } = this.options;\n    /**\n     * If we can't animate this value with the resolved keyframes\n     * then we should complete it immediately.\n     */\n    if (!isGenerator && !canAnimate(keyframes, name, type, velocity)) {\n      // Finish immediately\n      if (instantAnimationState.current || !delay) {\n        onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(getFinalKeyframe(keyframes, this.options, finalKeyframe));\n        onComplete === null || onComplete === void 0 ? void 0 : onComplete();\n        this.resolveFinishedPromise();\n        return;\n      }\n      // Finish after a delay\n      else {\n        this.options.duration = 0;\n      }\n    }\n    const resolvedAnimation = this.initPlayback(keyframes, finalKeyframe);\n    if (resolvedAnimation === false) return;\n    this._resolved = {\n      keyframes,\n      finalKeyframe,\n      ...resolvedAnimation\n    };\n    this.onPostResolved();\n  }\n  onPostResolved() {}\n  /**\n   * Allows the returned animation to be awaited or promise-chained. Currently\n   * resolves when the animation finishes at all but in a future update could/should\n   * reject if its cancels.\n   */\n  then(resolve, reject) {\n    return this.currentFinishedPromise.then(resolve, reject);\n  }\n  updateFinishedPromise() {\n    this.currentFinishedPromise = new Promise(resolve => {\n      this.resolveFinishedPromise = resolve;\n    });\n  }\n}\nexport { BaseAnimation };","map":{"version":3,"names":["flushKeyframeResolvers","instantAnimationState","canAnimate","getFinalKeyframe","BaseAnimation","constructor","_ref","autoplay","delay","type","repeat","repeatDelay","repeatType","options","isStopped","hasAttemptedResolve","updateFinishedPromise","resolved","_resolved","onKeyframesResolved","keyframes","finalKeyframe","name","velocity","onComplete","onUpdate","isGenerator","current","resolveFinishedPromise","duration","resolvedAnimation","initPlayback","onPostResolved","then","resolve","reject","currentFinishedPromise","Promise"],"sources":["D:/Programs/WebDev/ReactProject-1/my-first-site/node_modules/framer-motion/dist/es/animation/animators/BaseAnimation.mjs"],"sourcesContent":["import { flushKeyframeResolvers } from '../../render/utils/KeyframesResolver.mjs';\nimport { instantAnimationState } from '../../utils/use-instant-transition-state.mjs';\nimport { canAnimate } from './utils/can-animate.mjs';\nimport { getFinalKeyframe } from './waapi/utils/get-final-keyframe.mjs';\n\nclass BaseAnimation {\n    constructor({ autoplay = true, delay = 0, type = \"keyframes\", repeat = 0, repeatDelay = 0, repeatType = \"loop\", ...options }) {\n        // Track whether the animation has been stopped. Stopped animations won't restart.\n        this.isStopped = false;\n        this.hasAttemptedResolve = false;\n        this.options = {\n            autoplay,\n            delay,\n            type,\n            repeat,\n            repeatDelay,\n            repeatType,\n            ...options,\n        };\n        this.updateFinishedPromise();\n    }\n    /**\n     * A getter for resolved data. If keyframes are not yet resolved, accessing\n     * this.resolved will synchronously flush all pending keyframe resolvers.\n     * This is a deoptimisation, but at its worst still batches read/writes.\n     */\n    get resolved() {\n        if (!this._resolved && !this.hasAttemptedResolve) {\n            flushKeyframeResolvers();\n        }\n        return this._resolved;\n    }\n    /**\n     * A method to be called when the keyframes resolver completes. This method\n     * will check if its possible to run the animation and, if not, skip it.\n     * Otherwise, it will call initPlayback on the implementing class.\n     */\n    onKeyframesResolved(keyframes, finalKeyframe) {\n        this.hasAttemptedResolve = true;\n        const { name, type, velocity, delay, onComplete, onUpdate, isGenerator, } = this.options;\n        /**\n         * If we can't animate this value with the resolved keyframes\n         * then we should complete it immediately.\n         */\n        if (!isGenerator && !canAnimate(keyframes, name, type, velocity)) {\n            // Finish immediately\n            if (instantAnimationState.current || !delay) {\n                onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(getFinalKeyframe(keyframes, this.options, finalKeyframe));\n                onComplete === null || onComplete === void 0 ? void 0 : onComplete();\n                this.resolveFinishedPromise();\n                return;\n            }\n            // Finish after a delay\n            else {\n                this.options.duration = 0;\n            }\n        }\n        const resolvedAnimation = this.initPlayback(keyframes, finalKeyframe);\n        if (resolvedAnimation === false)\n            return;\n        this._resolved = {\n            keyframes,\n            finalKeyframe,\n            ...resolvedAnimation,\n        };\n        this.onPostResolved();\n    }\n    onPostResolved() { }\n    /**\n     * Allows the returned animation to be awaited or promise-chained. Currently\n     * resolves when the animation finishes at all but in a future update could/should\n     * reject if its cancels.\n     */\n    then(resolve, reject) {\n        return this.currentFinishedPromise.then(resolve, reject);\n    }\n    updateFinishedPromise() {\n        this.currentFinishedPromise = new Promise((resolve) => {\n            this.resolveFinishedPromise = resolve;\n        });\n    }\n}\n\nexport { BaseAnimation };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}